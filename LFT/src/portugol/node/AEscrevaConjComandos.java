/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.node;

import portugol.analysis.*;

@SuppressWarnings("nls")
public final class AEscrevaConjComandos extends PConjComandos
{
    private PConjComandos _conjComandos_;
    private PComandoEscreva _comandoEscreva_;

    public AEscrevaConjComandos()
    {
        // Constructor
    }

    public AEscrevaConjComandos(
        @SuppressWarnings("hiding") PConjComandos _conjComandos_,
        @SuppressWarnings("hiding") PComandoEscreva _comandoEscreva_)
    {
        // Constructor
        setConjComandos(_conjComandos_);

        setComandoEscreva(_comandoEscreva_);

    }

    @Override
    public Object clone()
    {
        return new AEscrevaConjComandos(
            cloneNode(this._conjComandos_),
            cloneNode(this._comandoEscreva_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEscrevaConjComandos(this);
    }

    public PConjComandos getConjComandos()
    {
        return this._conjComandos_;
    }

    public void setConjComandos(PConjComandos node)
    {
        if(this._conjComandos_ != null)
        {
            this._conjComandos_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conjComandos_ = node;
    }

    public PComandoEscreva getComandoEscreva()
    {
        return this._comandoEscreva_;
    }

    public void setComandoEscreva(PComandoEscreva node)
    {
        if(this._comandoEscreva_ != null)
        {
            this._comandoEscreva_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comandoEscreva_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conjComandos_)
            + toString(this._comandoEscreva_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conjComandos_ == child)
        {
            this._conjComandos_ = null;
            return;
        }

        if(this._comandoEscreva_ == child)
        {
            this._comandoEscreva_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conjComandos_ == oldChild)
        {
            setConjComandos((PConjComandos) newChild);
            return;
        }

        if(this._comandoEscreva_ == oldChild)
        {
            setComandoEscreva((PComandoEscreva) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
