/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.analysis;

import portugol.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAPrograma(APrograma node);
    void caseADeclaracoes(ADeclaracoes node);
    void caseAVazioDeclaracoes(AVazioDeclaracoes node);
    void caseAMultiplasDeclaracaoConj(AMultiplasDeclaracaoConj node);
    void caseASimplesDeclaracaoConj(ASimplesDeclaracaoConj node);
    void caseAConstDeclaracaoConj(AConstDeclaracaoConj node);
    void caseAMultiplasDeclaracaoVarLista(AMultiplasDeclaracaoVarLista node);
    void caseASimplesDeclaracaoVarLista(ASimplesDeclaracaoVarLista node);
    void caseAVarDef(AVarDef node);
    void caseAVetorVarDef(AVetorVarDef node);
    void caseAIntTipo(AIntTipo node);
    void caseATipo(ATipo node);
    void caseACTipo(ACTipo node);
    void caseAIntValor(AIntValor node);
    void caseAValor(AValor node);
    void caseAStrValor(AStrValor node);
    void caseAExpressoesExp(AExpressoesExp node);
    void caseAExp(AExp node);
    void caseAMExp(AMExp node);
    void caseANaologicaExp(ANaologicaExp node);
    void caseANExpnLogica(ANExpnLogica node);
    void caseAIgualExpLogica(AIgualExpLogica node);
    void caseAMaiorExpLogica(AMaiorExpLogica node);
    void caseAMenorExpLogica(AMenorExpLogica node);
    void caseAMaiorouigualExpLogica(AMaiorouigualExpLogica node);
    void caseAMenorouigualExpLogica(AMenorouigualExpLogica node);
    void caseADiferenteExpLogica(ADiferenteExpLogica node);
    void caseAUniaoExpLogica(AUniaoExpLogica node);
    void caseAOExpLogica(AOExpLogica node);
    void caseAXorrExpLogica(AXorrExpLogica node);
    void caseAMaisSomaMenos(AMaisSomaMenos node);
    void caseAMenosSomaMenos(AMenosSomaMenos node);
    void caseASomaMenos(ASomaMenos node);
    void caseAMultiplicacaoTermo(AMultiplicacaoTermo node);
    void caseATermo(ATermo node);
    void caseANumerointFator(ANumerointFator node);
    void caseAIdFator(AIdFator node);
    void caseAExpFator(AExpFator node);
    void caseAStrFator(AStrFator node);
    void caseALeiaConjComandos(ALeiaConjComandos node);
    void caseAEscrevaConjComandos(AEscrevaConjComandos node);
    void caseAAtribuiConjComandos(AAtribuiConjComandos node);
    void caseACondicionalConjComandos(ACondicionalConjComandos node);
    void caseAEnquantoConjComandos(AEnquantoConjComandos node);
    void caseARepitaConjComandos(ARepitaConjComandos node);
    void caseAFacaConjComandos(AFacaConjComandos node);
    void caseAFacaPassoConjComandos(AFacaPassoConjComandos node);
    void caseAConjComandos(AConjComandos node);
    void caseAVazioConjComandos(AVazioConjComandos node);
    void caseAComandoLeia(AComandoLeia node);
    void caseAComandoEscreva(AComandoEscreva node);
    void caseAComandoAtribuicao(AComandoAtribuicao node);
    void caseASimplesComandoSe(ASimplesComandoSe node);
    void caseACompletoComandoSe(ACompletoComandoSe node);
    void caseADSenao(ADSenao node);
    void caseAEnquantoComandoEnquanto(AEnquantoComandoEnquanto node);
    void caseARepitaComandoRepita(ARepitaComandoRepita node);
    void caseAParaComandoPara(AParaComandoPara node);
    void caseAComplementoPara(AComplementoPara node);
    void caseAComandoParaPasso(AComandoParaPasso node);
    void caseAComplementoPara2(AComplementoPara2 node);
    void caseAAvalieComandoAvalie(AAvalieComandoAvalie node);
    void caseAComandoCaso(AComandoCaso node);
    void caseASenaoAvalie(ASenaoAvalie node);
    void caseAVazioSenaoAvalie(AVazioSenaoAvalie node);

    void caseTFim(TFim node);
    void caseTVar(TVar node);
    void caseTInicio(TInicio node);
    void caseTPrograma(TPrograma node);
    void caseTLeia(TLeia node);
    void caseTEscreva(TEscreva node);
    void caseTConst(TConst node);
    void caseTInteiro(TInteiro node);
    void caseTReal(TReal node);
    void caseTCaractere(TCaractere node);
    void caseTString(TString node);
    void caseTNInt(TNInt node);
    void caseTNReal(TNReal node);
    void caseTSe(TSe node);
    void caseTFimSe(TFimSe node);
    void caseTEntao(TEntao node);
    void caseTSenao(TSenao node);
    void caseTAvalie(TAvalie node);
    void caseTFimAvalie(TFimAvalie node);
    void caseTCaso(TCaso node);
    void caseTEnquanto(TEnquanto node);
    void caseTFaca(TFaca node);
    void caseTFimEnquanto(TFimEnquanto node);
    void caseTRepita(TRepita node);
    void caseTAte(TAte node);
    void caseTPara(TPara node);
    void caseTFimPara(TFimPara node);
    void caseTDe(TDe node);
    void caseTPasso(TPasso node);
    void caseTMais(TMais node);
    void caseTMenos(TMenos node);
    void caseTMult(TMult node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTVirgula(TVirgula node);
    void caseTDoispontos(TDoispontos node);
    void caseTPontoevirgula(TPontoevirgula node);
    void caseTEsqParen(TEsqParen node);
    void caseTDirParen(TDirParen node);
    void caseTAspaD(TAspaD node);
    void caseTAspaS(TAspaS node);
    void caseTEsqColchete(TEsqColchete node);
    void caseTDirColchete(TDirColchete node);
    void caseTIgual(TIgual node);
    void caseTMaior(TMaior node);
    void caseTMenor(TMenor node);
    void caseTMaiorigual(TMaiorigual node);
    void caseTMenorigual(TMenorigual node);
    void caseTDiferente(TDiferente node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXor(TXor node);
    void caseTNao(TNao node);
    void caseTIdentificador(TIdentificador node);
    void caseTBlanks(TBlanks node);
    void caseTNumero(TNumero node);
    void caseTComment(TComment node);
    void caseTCommentEnd(TCommentEnd node);
    void caseTCommentBody(TCommentBody node);
    void caseTStar(TStar node);
    void caseTSlash(TSlash node);
    void caseTComentarioSimples(TComentarioSimples node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
