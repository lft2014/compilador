/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.analysis;

import java.util.*;
import portugol.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getDeclaracoes() != null)
        {
            node.getDeclaracoes().apply(this);
        }
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        outAPrograma(node);
    }

    public void inADeclaracoes(ADeclaracoes node)
    {
        defaultIn(node);
    }

    public void outADeclaracoes(ADeclaracoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracoes(ADeclaracoes node)
    {
        inADeclaracoes(node);
        if(node.getDeclaracoes() != null)
        {
            node.getDeclaracoes().apply(this);
        }
        if(node.getDeclaracaoConj() != null)
        {
            node.getDeclaracaoConj().apply(this);
        }
        outADeclaracoes(node);
    }

    public void inAVazioDeclaracoes(AVazioDeclaracoes node)
    {
        defaultIn(node);
    }

    public void outAVazioDeclaracoes(AVazioDeclaracoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioDeclaracoes(AVazioDeclaracoes node)
    {
        inAVazioDeclaracoes(node);
        outAVazioDeclaracoes(node);
    }

    public void inAMultiplasDeclaracaoConj(AMultiplasDeclaracaoConj node)
    {
        defaultIn(node);
    }

    public void outAMultiplasDeclaracaoConj(AMultiplasDeclaracaoConj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplasDeclaracaoConj(AMultiplasDeclaracaoConj node)
    {
        inAMultiplasDeclaracaoConj(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getDeclaracaoVarLista() != null)
        {
            node.getDeclaracaoVarLista().apply(this);
        }
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        outAMultiplasDeclaracaoConj(node);
    }

    public void inASimplesDeclaracaoConj(ASimplesDeclaracaoConj node)
    {
        defaultIn(node);
    }

    public void outASimplesDeclaracaoConj(ASimplesDeclaracaoConj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesDeclaracaoConj(ASimplesDeclaracaoConj node)
    {
        inASimplesDeclaracaoConj(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        outASimplesDeclaracaoConj(node);
    }

    public void inAConstDeclaracaoConj(AConstDeclaracaoConj node)
    {
        defaultIn(node);
    }

    public void outAConstDeclaracaoConj(AConstDeclaracaoConj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDeclaracaoConj(AConstDeclaracaoConj node)
    {
        inAConstDeclaracaoConj(node);
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        outAConstDeclaracaoConj(node);
    }

    public void inAMultiplasDeclaracaoVarLista(AMultiplasDeclaracaoVarLista node)
    {
        defaultIn(node);
    }

    public void outAMultiplasDeclaracaoVarLista(AMultiplasDeclaracaoVarLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplasDeclaracaoVarLista(AMultiplasDeclaracaoVarLista node)
    {
        inAMultiplasDeclaracaoVarLista(node);
        if(node.getDeclaracaoVarLista() != null)
        {
            node.getDeclaracaoVarLista().apply(this);
        }
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAMultiplasDeclaracaoVarLista(node);
    }

    public void inASimplesDeclaracaoVarLista(ASimplesDeclaracaoVarLista node)
    {
        defaultIn(node);
    }

    public void outASimplesDeclaracaoVarLista(ASimplesDeclaracaoVarLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesDeclaracaoVarLista(ASimplesDeclaracaoVarLista node)
    {
        inASimplesDeclaracaoVarLista(node);
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outASimplesDeclaracaoVarLista(node);
    }

    public void inAVarDef(AVarDef node)
    {
        defaultIn(node);
    }

    public void outAVarDef(AVarDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDef(AVarDef node)
    {
        inAVarDef(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVarDef(node);
    }

    public void inAVetorVarDef(AVetorVarDef node)
    {
        defaultIn(node);
    }

    public void outAVetorVarDef(AVetorVarDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVarDef(AVetorVarDef node)
    {
        inAVetorVarDef(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getEsqColchete() != null)
        {
            node.getEsqColchete().apply(this);
        }
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        if(node.getDirColchete() != null)
        {
            node.getDirColchete().apply(this);
        }
        outAVetorVarDef(node);
    }

    public void inAIntTipo(AIntTipo node)
    {
        defaultIn(node);
    }

    public void outAIntTipo(AIntTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipo(AIntTipo node)
    {
        inAIntTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAIntTipo(node);
    }

    public void inATipo(ATipo node)
    {
        defaultIn(node);
    }

    public void outATipo(ATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipo(ATipo node)
    {
        inATipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outATipo(node);
    }

    public void inACTipo(ACTipo node)
    {
        defaultIn(node);
    }

    public void outACTipo(ACTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACTipo(ACTipo node)
    {
        inACTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACTipo(node);
    }

    public void inAIntValor(AIntValor node)
    {
        defaultIn(node);
    }

    public void outAIntValor(AIntValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntValor(AIntValor node)
    {
        inAIntValor(node);
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        outAIntValor(node);
    }

    public void inAValor(AValor node)
    {
        defaultIn(node);
    }

    public void outAValor(AValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValor(AValor node)
    {
        inAValor(node);
        if(node.getNReal() != null)
        {
            node.getNReal().apply(this);
        }
        outAValor(node);
    }

    public void inAStrValor(AStrValor node)
    {
        defaultIn(node);
    }

    public void outAStrValor(AStrValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrValor(AStrValor node)
    {
        inAStrValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStrValor(node);
    }

    public void inAExpressoesExp(AExpressoesExp node)
    {
        defaultIn(node);
    }

    public void outAExpressoesExp(AExpressoesExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressoesExp(AExpressoesExp node)
    {
        inAExpressoesExp(node);
        if(node.getSomaMenos() != null)
        {
            node.getSomaMenos().apply(this);
        }
        outAExpressoesExp(node);
    }

    public void inAExp(AExp node)
    {
        defaultIn(node);
    }

    public void outAExp(AExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp(AExp node)
    {
        inAExp(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAExp(node);
    }

    public void inAMExp(AMExp node)
    {
        defaultIn(node);
    }

    public void outAMExp(AMExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMExp(AMExp node)
    {
        inAMExp(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getSomaMenos() != null)
        {
            node.getSomaMenos().apply(this);
        }
        outAMExp(node);
    }

    public void inANaologicaExp(ANaologicaExp node)
    {
        defaultIn(node);
    }

    public void outANaologicaExp(ANaologicaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaologicaExp(ANaologicaExp node)
    {
        inANaologicaExp(node);
        if(node.getExpnLogica() != null)
        {
            node.getExpnLogica().apply(this);
        }
        outANaologicaExp(node);
    }

    public void inANExpnLogica(ANExpnLogica node)
    {
        defaultIn(node);
    }

    public void outANExpnLogica(ANExpnLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANExpnLogica(ANExpnLogica node)
    {
        inANExpnLogica(node);
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        if(node.getSomaMenos() != null)
        {
            node.getSomaMenos().apply(this);
        }
        outANExpnLogica(node);
    }

    public void inAIgualExpLogica(AIgualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAIgualExpLogica(AIgualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExpLogica(AIgualExpLogica node)
    {
        inAIgualExpLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getSomaMenos() != null)
        {
            node.getSomaMenos().apply(this);
        }
        outAIgualExpLogica(node);
    }

    public void inAMaiorExpLogica(AMaiorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorExpLogica(AMaiorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExpLogica(AMaiorExpLogica node)
    {
        inAMaiorExpLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        if(node.getSomaMenos() != null)
        {
            node.getSomaMenos().apply(this);
        }
        outAMaiorExpLogica(node);
    }

    public void inAMenorExpLogica(AMenorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorExpLogica(AMenorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExpLogica(AMenorExpLogica node)
    {
        inAMenorExpLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getSomaMenos() != null)
        {
            node.getSomaMenos().apply(this);
        }
        outAMenorExpLogica(node);
    }

    public void inAMaiorouigualExpLogica(AMaiorouigualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorouigualExpLogica(AMaiorouigualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorouigualExpLogica(AMaiorouigualExpLogica node)
    {
        inAMaiorouigualExpLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMaiorigual() != null)
        {
            node.getMaiorigual().apply(this);
        }
        if(node.getSomaMenos() != null)
        {
            node.getSomaMenos().apply(this);
        }
        outAMaiorouigualExpLogica(node);
    }

    public void inAMenorouigualExpLogica(AMenorouigualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorouigualExpLogica(AMenorouigualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorouigualExpLogica(AMenorouigualExpLogica node)
    {
        inAMenorouigualExpLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMenorigual() != null)
        {
            node.getMenorigual().apply(this);
        }
        if(node.getSomaMenos() != null)
        {
            node.getSomaMenos().apply(this);
        }
        outAMenorouigualExpLogica(node);
    }

    public void inADiferenteExpLogica(ADiferenteExpLogica node)
    {
        defaultIn(node);
    }

    public void outADiferenteExpLogica(ADiferenteExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteExpLogica(ADiferenteExpLogica node)
    {
        inADiferenteExpLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        if(node.getSomaMenos() != null)
        {
            node.getSomaMenos().apply(this);
        }
        outADiferenteExpLogica(node);
    }

    public void inAUniaoExpLogica(AUniaoExpLogica node)
    {
        defaultIn(node);
    }

    public void outAUniaoExpLogica(AUniaoExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUniaoExpLogica(AUniaoExpLogica node)
    {
        inAUniaoExpLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getSomaMenos() != null)
        {
            node.getSomaMenos().apply(this);
        }
        outAUniaoExpLogica(node);
    }

    public void inAOExpLogica(AOExpLogica node)
    {
        defaultIn(node);
    }

    public void outAOExpLogica(AOExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOExpLogica(AOExpLogica node)
    {
        inAOExpLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getSomaMenos() != null)
        {
            node.getSomaMenos().apply(this);
        }
        outAOExpLogica(node);
    }

    public void inAXorrExpLogica(AXorrExpLogica node)
    {
        defaultIn(node);
    }

    public void outAXorrExpLogica(AXorrExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorrExpLogica(AXorrExpLogica node)
    {
        inAXorrExpLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getSomaMenos() != null)
        {
            node.getSomaMenos().apply(this);
        }
        outAXorrExpLogica(node);
    }

    public void inAMaisSomaMenos(AMaisSomaMenos node)
    {
        defaultIn(node);
    }

    public void outAMaisSomaMenos(AMaisSomaMenos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisSomaMenos(AMaisSomaMenos node)
    {
        inAMaisSomaMenos(node);
        if(node.getSomaMenos() != null)
        {
            node.getSomaMenos().apply(this);
        }
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAMaisSomaMenos(node);
    }

    public void inAMenosSomaMenos(AMenosSomaMenos node)
    {
        defaultIn(node);
    }

    public void outAMenosSomaMenos(AMenosSomaMenos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosSomaMenos(AMenosSomaMenos node)
    {
        inAMenosSomaMenos(node);
        if(node.getSomaMenos() != null)
        {
            node.getSomaMenos().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAMenosSomaMenos(node);
    }

    public void inASomaMenos(ASomaMenos node)
    {
        defaultIn(node);
    }

    public void outASomaMenos(ASomaMenos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaMenos(ASomaMenos node)
    {
        inASomaMenos(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outASomaMenos(node);
    }

    public void inAMultiplicacaoTermo(AMultiplicacaoTermo node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoTermo(AMultiplicacaoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoTermo(AMultiplicacaoTermo node)
    {
        inAMultiplicacaoTermo(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMultiplicacaoTermo(node);
    }

    public void inATermo(ATermo node)
    {
        defaultIn(node);
    }

    public void outATermo(ATermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermo(ATermo node)
    {
        inATermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outATermo(node);
    }

    public void inANumerointFator(ANumerointFator node)
    {
        defaultIn(node);
    }

    public void outANumerointFator(ANumerointFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumerointFator(ANumerointFator node)
    {
        inANumerointFator(node);
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        outANumerointFator(node);
    }

    public void inAIdFator(AIdFator node)
    {
        defaultIn(node);
    }

    public void outAIdFator(AIdFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdFator(AIdFator node)
    {
        inAIdFator(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdFator(node);
    }

    public void inAExpFator(AExpFator node)
    {
        defaultIn(node);
    }

    public void outAExpFator(AExpFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpFator(AExpFator node)
    {
        inAExpFator(node);
        if(node.getEsqParen() != null)
        {
            node.getEsqParen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getDirParen() != null)
        {
            node.getDirParen().apply(this);
        }
        outAExpFator(node);
    }

    public void inAStrFator(AStrFator node)
    {
        defaultIn(node);
    }

    public void outAStrFator(AStrFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrFator(AStrFator node)
    {
        inAStrFator(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStrFator(node);
    }

    public void inALeiaConjComandos(ALeiaConjComandos node)
    {
        defaultIn(node);
    }

    public void outALeiaConjComandos(ALeiaConjComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaConjComandos(ALeiaConjComandos node)
    {
        inALeiaConjComandos(node);
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getComandoLeia() != null)
        {
            node.getComandoLeia().apply(this);
        }
        outALeiaConjComandos(node);
    }

    public void inAEscrevaConjComandos(AEscrevaConjComandos node)
    {
        defaultIn(node);
    }

    public void outAEscrevaConjComandos(AEscrevaConjComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaConjComandos(AEscrevaConjComandos node)
    {
        inAEscrevaConjComandos(node);
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getComandoEscreva() != null)
        {
            node.getComandoEscreva().apply(this);
        }
        outAEscrevaConjComandos(node);
    }

    public void inAAtribuiConjComandos(AAtribuiConjComandos node)
    {
        defaultIn(node);
    }

    public void outAAtribuiConjComandos(AAtribuiConjComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuiConjComandos(AAtribuiConjComandos node)
    {
        inAAtribuiConjComandos(node);
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getComandoAtribuicao() != null)
        {
            node.getComandoAtribuicao().apply(this);
        }
        outAAtribuiConjComandos(node);
    }

    public void inACondicionalConjComandos(ACondicionalConjComandos node)
    {
        defaultIn(node);
    }

    public void outACondicionalConjComandos(ACondicionalConjComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondicionalConjComandos(ACondicionalConjComandos node)
    {
        inACondicionalConjComandos(node);
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getComandoSe() != null)
        {
            node.getComandoSe().apply(this);
        }
        outACondicionalConjComandos(node);
    }

    public void inAEnquantoConjComandos(AEnquantoConjComandos node)
    {
        defaultIn(node);
    }

    public void outAEnquantoConjComandos(AEnquantoConjComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoConjComandos(AEnquantoConjComandos node)
    {
        inAEnquantoConjComandos(node);
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getComandoEnquanto() != null)
        {
            node.getComandoEnquanto().apply(this);
        }
        outAEnquantoConjComandos(node);
    }

    public void inARepitaConjComandos(ARepitaConjComandos node)
    {
        defaultIn(node);
    }

    public void outARepitaConjComandos(ARepitaConjComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaConjComandos(ARepitaConjComandos node)
    {
        inARepitaConjComandos(node);
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getComandoRepita() != null)
        {
            node.getComandoRepita().apply(this);
        }
        outARepitaConjComandos(node);
    }

    public void inAFacaConjComandos(AFacaConjComandos node)
    {
        defaultIn(node);
    }

    public void outAFacaConjComandos(AFacaConjComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFacaConjComandos(AFacaConjComandos node)
    {
        inAFacaConjComandos(node);
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getComandoPara() != null)
        {
            node.getComandoPara().apply(this);
        }
        outAFacaConjComandos(node);
    }

    public void inAFacaPassoConjComandos(AFacaPassoConjComandos node)
    {
        defaultIn(node);
    }

    public void outAFacaPassoConjComandos(AFacaPassoConjComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFacaPassoConjComandos(AFacaPassoConjComandos node)
    {
        inAFacaPassoConjComandos(node);
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getComandoParaPasso() != null)
        {
            node.getComandoParaPasso().apply(this);
        }
        outAFacaPassoConjComandos(node);
    }

    public void inAConjComandos(AConjComandos node)
    {
        defaultIn(node);
    }

    public void outAConjComandos(AConjComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConjComandos(AConjComandos node)
    {
        inAConjComandos(node);
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getComandoAvalie() != null)
        {
            node.getComandoAvalie().apply(this);
        }
        outAConjComandos(node);
    }

    public void inAVazioConjComandos(AVazioConjComandos node)
    {
        defaultIn(node);
    }

    public void outAVazioConjComandos(AVazioConjComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioConjComandos(AVazioConjComandos node)
    {
        inAVazioConjComandos(node);
        outAVazioConjComandos(node);
    }

    public void inAComandoLeia(AComandoLeia node)
    {
        defaultIn(node);
    }

    public void outAComandoLeia(AComandoLeia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoLeia(AComandoLeia node)
    {
        inAComandoLeia(node);
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        if(node.getEsqParen() != null)
        {
            node.getEsqParen().apply(this);
        }
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        if(node.getDirParen() != null)
        {
            node.getDirParen().apply(this);
        }
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        outAComandoLeia(node);
    }

    public void inAComandoEscreva(AComandoEscreva node)
    {
        defaultIn(node);
    }

    public void outAComandoEscreva(AComandoEscreva node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEscreva(AComandoEscreva node)
    {
        inAComandoEscreva(node);
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        if(node.getEsqParen() != null)
        {
            node.getEsqParen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getDirParen() != null)
        {
            node.getDirParen().apply(this);
        }
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        outAComandoEscreva(node);
    }

    public void inAComandoAtribuicao(AComandoAtribuicao node)
    {
        defaultIn(node);
    }

    public void outAComandoAtribuicao(AComandoAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoAtribuicao(AComandoAtribuicao node)
    {
        inAComandoAtribuicao(node);
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        outAComandoAtribuicao(node);
    }

    public void inASimplesComandoSe(ASimplesComandoSe node)
    {
        defaultIn(node);
    }

    public void outASimplesComandoSe(ASimplesComandoSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesComandoSe(ASimplesComandoSe node)
    {
        inASimplesComandoSe(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getEsqParen() != null)
        {
            node.getEsqParen().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getDirParen() != null)
        {
            node.getDirParen().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        outASimplesComandoSe(node);
    }

    public void inACompletoComandoSe(ACompletoComandoSe node)
    {
        defaultIn(node);
    }

    public void outACompletoComandoSe(ACompletoComandoSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompletoComandoSe(ACompletoComandoSe node)
    {
        inACompletoComandoSe(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getEsqParen() != null)
        {
            node.getEsqParen().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getDirParen() != null)
        {
            node.getDirParen().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getDSenao() != null)
        {
            node.getDSenao().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        outACompletoComandoSe(node);
    }

    public void inADSenao(ADSenao node)
    {
        defaultIn(node);
    }

    public void outADSenao(ADSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADSenao(ADSenao node)
    {
        inADSenao(node);
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        outADSenao(node);
    }

    public void inAEnquantoComandoEnquanto(AEnquantoComandoEnquanto node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComandoEnquanto(AEnquantoComandoEnquanto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComandoEnquanto(AEnquantoComandoEnquanto node)
    {
        inAEnquantoComandoEnquanto(node);
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        if(node.getEsqParen() != null)
        {
            node.getEsqParen().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getDirParen() != null)
        {
            node.getDirParen().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getFimEnquanto() != null)
        {
            node.getFimEnquanto().apply(this);
        }
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        outAEnquantoComandoEnquanto(node);
    }

    public void inARepitaComandoRepita(ARepitaComandoRepita node)
    {
        defaultIn(node);
    }

    public void outARepitaComandoRepita(ARepitaComandoRepita node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComandoRepita(ARepitaComandoRepita node)
    {
        inARepitaComandoRepita(node);
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getEsqParen() != null)
        {
            node.getEsqParen().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getDirParen() != null)
        {
            node.getDirParen().apply(this);
        }
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        outARepitaComandoRepita(node);
    }

    public void inAParaComandoPara(AParaComandoPara node)
    {
        defaultIn(node);
    }

    public void outAParaComandoPara(AParaComandoPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComandoPara(AParaComandoPara node)
    {
        inAParaComandoPara(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getComplementoPara() != null)
        {
            node.getComplementoPara().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        outAParaComandoPara(node);
    }

    public void inAComplementoPara(AComplementoPara node)
    {
        defaultIn(node);
    }

    public void outAComplementoPara(AComplementoPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComplementoPara(AComplementoPara node)
    {
        inAComplementoPara(node);
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        outAComplementoPara(node);
    }

    public void inAComandoParaPasso(AComandoParaPasso node)
    {
        defaultIn(node);
    }

    public void outAComandoParaPasso(AComandoParaPasso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoParaPasso(AComandoParaPasso node)
    {
        inAComandoParaPasso(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getComplementoPara2() != null)
        {
            node.getComplementoPara2().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getComplementoPara() != null)
        {
            node.getComplementoPara().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        outAComandoParaPasso(node);
    }

    public void inAComplementoPara2(AComplementoPara2 node)
    {
        defaultIn(node);
    }

    public void outAComplementoPara2(AComplementoPara2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComplementoPara2(AComplementoPara2 node)
    {
        inAComplementoPara2(node);
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        outAComplementoPara2(node);
    }

    public void inAAvalieComandoAvalie(AAvalieComandoAvalie node)
    {
        defaultIn(node);
    }

    public void outAAvalieComandoAvalie(AAvalieComandoAvalie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComandoAvalie(AAvalieComandoAvalie node)
    {
        inAAvalieComandoAvalie(node);
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        if(node.getEsqParen() != null)
        {
            node.getEsqParen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getDirParen() != null)
        {
            node.getDirParen().apply(this);
        }
        {
            List<PComandoCaso> copy = new ArrayList<PComandoCaso>(node.getComandoCaso());
            for(PComandoCaso e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSenaoAvalie() != null)
        {
            node.getSenaoAvalie().apply(this);
        }
        if(node.getFimAvalie() != null)
        {
            node.getFimAvalie().apply(this);
        }
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        outAAvalieComandoAvalie(node);
    }

    public void inAComandoCaso(AComandoCaso node)
    {
        defaultIn(node);
    }

    public void outAComandoCaso(AComandoCaso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoCaso(AComandoCaso node)
    {
        inAComandoCaso(node);
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        outAComandoCaso(node);
    }

    public void inASenaoAvalie(ASenaoAvalie node)
    {
        defaultIn(node);
    }

    public void outASenaoAvalie(ASenaoAvalie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoAvalie(ASenaoAvalie node)
    {
        inASenaoAvalie(node);
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getConjComandos() != null)
        {
            node.getConjComandos().apply(this);
        }
        outASenaoAvalie(node);
    }

    public void inAVazioSenaoAvalie(AVazioSenaoAvalie node)
    {
        defaultIn(node);
    }

    public void outAVazioSenaoAvalie(AVazioSenaoAvalie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioSenaoAvalie(AVazioSenaoAvalie node)
    {
        inAVazioSenaoAvalie(node);
        outAVazioSenaoAvalie(node);
    }
}
