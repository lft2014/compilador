/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.node;

import portugol.analysis.*;

@SuppressWarnings("nls")
public final class AFacaPassoConjComandos extends PConjComandos
{
    private PConjComandos _conjComandos_;
    private PComandoParaPasso _comandoParaPasso_;

    public AFacaPassoConjComandos()
    {
        // Constructor
    }

    public AFacaPassoConjComandos(
        @SuppressWarnings("hiding") PConjComandos _conjComandos_,
        @SuppressWarnings("hiding") PComandoParaPasso _comandoParaPasso_)
    {
        // Constructor
        setConjComandos(_conjComandos_);

        setComandoParaPasso(_comandoParaPasso_);

    }

    @Override
    public Object clone()
    {
        return new AFacaPassoConjComandos(
            cloneNode(this._conjComandos_),
            cloneNode(this._comandoParaPasso_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFacaPassoConjComandos(this);
    }

    public PConjComandos getConjComandos()
    {
        return this._conjComandos_;
    }

    public void setConjComandos(PConjComandos node)
    {
        if(this._conjComandos_ != null)
        {
            this._conjComandos_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conjComandos_ = node;
    }

    public PComandoParaPasso getComandoParaPasso()
    {
        return this._comandoParaPasso_;
    }

    public void setComandoParaPasso(PComandoParaPasso node)
    {
        if(this._comandoParaPasso_ != null)
        {
            this._comandoParaPasso_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comandoParaPasso_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conjComandos_)
            + toString(this._comandoParaPasso_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conjComandos_ == child)
        {
            this._conjComandos_ = null;
            return;
        }

        if(this._comandoParaPasso_ == child)
        {
            this._comandoParaPasso_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conjComandos_ == oldChild)
        {
            setConjComandos((PConjComandos) newChild);
            return;
        }

        if(this._comandoParaPasso_ == oldChild)
        {
            setComandoParaPasso((PComandoParaPasso) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
