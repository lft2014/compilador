/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.analysis;

import java.util.*;
import portugol.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaracoes(ADeclaracoes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVazioDeclaracoes(AVazioDeclaracoes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplasDeclaracaoConj(AMultiplasDeclaracaoConj node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimplesDeclaracaoConj(ASimplesDeclaracaoConj node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstDeclaracaoConj(AConstDeclaracaoConj node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplasDeclaracaoVarLista(AMultiplasDeclaracaoVarLista node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimplesDeclaracaoVarLista(ASimplesDeclaracaoVarLista node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDef(AVarDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVetorVarDef(AVetorVarDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntTipo(AIntTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipo(ATipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACTipo(ACTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntValor(AIntValor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValor(AValor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStrValor(AStrValor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressoesExp(AExpressoesExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp(AExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMExp(AMExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANaologicaExp(ANaologicaExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANExpnLogica(ANExpnLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIgualExpLogica(AIgualExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMaiorExpLogica(AMaiorExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMenorExpLogica(AMenorExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMaiorouigualExpLogica(AMaiorouigualExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMenorouigualExpLogica(AMenorouigualExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADiferenteExpLogica(ADiferenteExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUniaoExpLogica(AUniaoExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOExpLogica(AOExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAXorrExpLogica(AXorrExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMaisSomaMenos(AMaisSomaMenos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMenosSomaMenos(AMenosSomaMenos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASomaMenos(ASomaMenos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplicacaoTermo(AMultiplicacaoTermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermo(ATermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumerointFator(ANumerointFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdFator(AIdFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpFator(AExpFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStrFator(AStrFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALeiaConjComandos(ALeiaConjComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEscrevaConjComandos(AEscrevaConjComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAtribuiConjComandos(AAtribuiConjComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACondicionalConjComandos(ACondicionalConjComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnquantoConjComandos(AEnquantoConjComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARepitaConjComandos(ARepitaConjComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFacaConjComandos(AFacaConjComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFacaPassoConjComandos(AFacaPassoConjComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConjComandos(AConjComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVazioConjComandos(AVazioConjComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoLeia(AComandoLeia node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoEscreva(AComandoEscreva node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoAtribuicao(AComandoAtribuicao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimplesComandoSe(ASimplesComandoSe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACompletoComandoSe(ACompletoComandoSe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADSenao(ADSenao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnquantoComandoEnquanto(AEnquantoComandoEnquanto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARepitaComandoRepita(ARepitaComandoRepita node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParaComandoPara(AParaComandoPara node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComplementoPara(AComplementoPara node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoParaPasso(AComandoParaPasso node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComplementoPara2(AComplementoPara2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAvalieComandoAvalie(AAvalieComandoAvalie node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASenaoAvalie(ASenaoAvalie node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVazioSenaoAvalie(AVazioSenaoAvalie node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFim(TFim node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInicio(TInicio node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrograma(TPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeia(TLeia node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEscreva(TEscreva node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConst(TConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInteiro(TInteiro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReal(TReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCaractere(TCaractere node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNInt(TNInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNReal(TNReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSe(TSe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFimSe(TFimSe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEntao(TEntao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSenao(TSenao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAvalie(TAvalie node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFimAvalie(TFimAvalie node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCaso(TCaso node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnquanto(TEnquanto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFaca(TFaca node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFimEnquanto(TFimEnquanto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRepita(TRepita node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAte(TAte node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPara(TPara node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFimPara(TFimPara node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDe(TDe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPasso(TPasso node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMais(TMais node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenos(TMenos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtribuicao(TAtribuicao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgula(TVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoispontos(TDoispontos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPontoevirgula(TPontoevirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEsqParen(TEsqParen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDirParen(TDirParen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAspaD(TAspaD node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAspaS(TAspaS node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEsqColchete(TEsqColchete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDirColchete(TDirColchete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIgual(TIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaior(TMaior node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenor(TMenor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaiorigual(TMaiorigual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenorigual(TMenorigual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiferente(TDiferente node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTE(TE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOu(TOu node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNao(TNao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentificador(TIdentificador node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlanks(TBlanks node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumero(TNumero node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentEnd(TCommentEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentBody(TCommentBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSlash(TSlash node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioSimples(TComentarioSimples node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
