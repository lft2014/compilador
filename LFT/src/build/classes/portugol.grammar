Package portugol;

Helpers
  underscore = '_' ;    
  ascii_char = [32 .. 127] ;
  tudo = [0 .. 0xffff];

  // letras e digitos
  letra = [['a' .. 'z'] + ['A' .. 'Z']];
  digito = ['0' .. '9'] ;

  
  tab = 9 ;
  cr = 13 ;
  lf = 10 ;
  blank = ' ' ;
  eol = cr lf | cr | lf;

States
  normal,
  comment;

Tokens
  //palavras reservadas
{normal} fim = 'fim.' ;
{normal} var = 'var' ;
{normal} inicio = 'inicio' ;
{normal} programa = 'programa' ;
{normal} leia = 'leia' ;
{normal} escreva = 'escreva' ;
{normal} const = 'const' ;

  //tipos
{normal} inteiro = 'inteiro' ;
{normal} real = 'real' ;
{normal} caractere = 'caractere' ; 
{normal} string = '''[tudo-''']*''' ;
{normal} n_int = digito+;
{normal} n_real = digito+'.'digito+;
 
  //condicoes
{normal} se = 'se' ;
{normal} fim_se = 'fim se' ;
{normal} entao = 'entao' ;
{normal} senao = 'senao' ;
{normal} avalie = 'avalie' ;
{normal} fim_avalie = 'fim avalie' ;
{normal} caso = 'caso' ;
  
  //loop
{normal} enquanto = 'enquanto' ;
{normal} faca = 'faca';
{normal} fim_enquanto = 'fim enquanto' ;
{normal} repita = 'repita' ;
{normal} ate = 'ate' ;
{normal} para = 'para' ;
{normal} fim_para = 'fim para' ;
{normal} de = 'de' ;
{normal} passo = 'passo' ;

  // simbolos aritmeticos
{normal} mais = '+' ;
{normal} menos = '-' ;
{normal} mult = '*' ;
{normal} atribuicao = '<-' ;

    
  // simbolos separadores
{normal} virgula = ',' ;
{normal} doispontos= ':' ;
{normal} pontoevirgula = ';' ;
{normal} esq_paren = '(' ;
{normal} dir_paren = ')' ;
{normal} aspa_d = '"' ;
{normal} aspa_s = ''';
{normal} esq_colchete = '[' ;
{normal} dir_colchete = ']' ;

  //simbolos logicos    
{normal} igual = '=' ;
{normal} maior ='>' ;
{normal} menor = '<';
{normal} maiorigual = '>=';
{normal} menorigual = '<=';
{normal} diferente = '<>';
{normal} e = 'e';
{normal} ou = 'ou';
{normal} xor = 'xor';
{normal} nao = 'nao';

  // identificador
{normal} identificador = underscore(letra | digito | underscore)* | letra (letra | digito | underscore)* ;
  
  // blanks 
{normal} blanks = blank | cr lf | cr | lf | tab ;
 
  // numeros
{normal} numero = digito+ ; 

  // comentario aninhado
{normal->comment, comment}
          comment = '/*';


{comment} comment_end = '*/';
{comment} comment_body = [tudo -['*' + '/']]*;
{comment} star = '*';
{comment} slash = '/';

  //comentario simples
{normal} comentario_simples= '//'( [tudo -[cr + lf]]*) eol;

Ignored Tokens
  comentario_simples,
  comment, 
  blanks ;

Productions
  //estrutura de um programa em portugol: cabe�alho, inicio, declara��es, conj. de comandos e fim'.' .
  programa =
    T.programa identificador pontoevirgula
     inicio
      	declaracoes
		    conj_comandos
    fim ;

	// uma declaracao pode ser de variavel ou de uma constante ou nada
   declaracoes = declaracoes declaracao_conj | {vazio};

  //declara�ao estrutura: variavel(simples/unica ou de um conjunto de variaveis separadas por virgula) ou constante
   declaracao_conj =  {multiplas}tipo doispontos  declaracao_var_lista var_def pontoevirgula|
		                 {simples}tipo doispontos var_def pontoevirgula |
		                 {const}const identificador valor pontoevirgula ;
			 
   //estrutura de declara��o de variaveis separadas por virgula(virgula)                 
  declaracao_var_lista = {multiplas}declaracao_var_lista var_def virgula|
		                  {simples} var_def virgula ;

   //estrutura de uma variavel
   var_def = identificador |{vetor}identificador esq_colchete n_int dir_colchete ;

   //estrutura de um tipo
   tipo = {int}inteiro | real | {c}caractere  ; 
   
   //estrutura de valor
   valor = {int}n_int | n_real| {str}string ;



   //gramatica de expressoes
   exp = {expressoes}soma_menos | exp_logica;

   exp_logica =
        {igual}exp igual soma_menos|
        {maior}exp maior soma_menos |
        {menor}exp menor soma_menos |
        {maiorouigual}exp maiorigual soma_menos |
        {menorouigual}exp menorigual soma_menos |
        {diferente}exp diferente soma_menos |
        {uniao}exp e soma_menos|
        {o}exp ou soma_menos|
        {xorr}exp xor soma_menos|
	      {nao}nao exp soma_menos;	
        //|{n}nao exp ; //essa linha esta dando erro

   soma_menos = {mais}soma_menos mais termo |
                {menos}soma_menos menos termo|
                termo ;

   termo = {multiplicacao}termo mult fator |
           fator ;   

   fator = {numeroint}n_int | 
          {id}identificador |   
          {exp}esq_paren exp dir_paren |
          {str}string ;



   /* Cada comando do conjunto de comandos chama uma express�o, um comando, 
    Comando com exp : -Atribui��o: ok
                      -Escreva: ok
                      -Avalie   
    Comandos com exp-logica: -se/sen�o:ok
                             -enquanto/faca :ok
                             -repita:ok
    Comandos sem exp:         
                             -Leia : ok
                             -para/de/ate/faca:ok  para/de/passo/ate/faca

    Sendo que na especifica��o do projeto um programa pode ter ou n�o(vazio) um comando/conj-comandos*/

   conj_comandos = {leia}conj_comandos comando_leia  |
                   {escreva}conj_comandos comando_escreva |
                   {atribui}conj_comandos comando_atribuicao|
                   {condicional}conj_comandos comando_se|
                   {enquanto} conj_comandos comando_enquanto|
                   {repita} conj_comandos comando_repita|
                   {faca} conj_comandos comando_para|
                   {faca_passo} conj_comandos comando_para_passo|
                   conj_comandos comando_avalie|
                   {vazio} ;

  comando_leia =  leia esq_paren var_def dir_paren pontoevirgula; 
  comando_escreva = escreva esq_paren exp dir_paren pontoevirgula ;
  comando_atribuicao = var_def atribuicao exp pontoevirgula; 
  
  comando_se =  {simples} se esq_paren exp_logica dir_paren entao conj_comandos fim_se pontoevirgula|
                {completo} se esq_paren exp dir_paren entao conj_comandos senao d_senao fim_se pontoevirgula;
                 //d_senao serve somente pq nao pode na mesma produção termos dois "declaração" 
                 d_senao = conj_comandos; 

  comando_enquanto ={enquanto} enquanto esq_paren exp_logica dir_paren faca conj_comandos fim_enquanto pontoevirgula;
  comando_repita ={repita} repita conj_comandos ate esq_paren exp_logica dir_paren pontoevirgula;
  comando_para = {para}para var_def de n_int ate complemento_para faca conj_comandos fim_para pontoevirgula;
  //foi necessario dividir a declaraçao do n_int por que jah existia um em comando para   
  complemento_para = n_int;
  comando_para_passo = para var_def de n_int passo complemento_para2 ate complemento_para faca conj_comandos fim_para pontoevirgula;
  complemento_para2 = n_int;

  comando_avalie = {avalie} avalie esq_paren exp dir_paren caso valor doispontos conj_comandos senao_avalie fim_avalie pontoevirgula;
  senao_avalie = senao doispontos conj_comandos | {vazio};
